---
export const prerender = true;

import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection, getEntryBySlug, type CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const allGalleries = await getCollection('galleries');
  return allGalleries.map(galleryEntry => ({
    params: { slug: galleryEntry.slug },
    props: { gallery: galleryEntry }, 
  }));
}

interface Props {
  gallery: CollectionEntry<'galleries'>;
}
const { gallery } = Astro.props as Props;

const { Content } = await gallery.render();

// Helper function to format date
function formatDate(dateInput: Date | string): string {
  if (!dateInput) return '';
  const date = typeof dateInput === 'string' ? new Date(dateInput) : dateInput;
  return date.toLocaleDateString('cs-CZ', { year: 'numeric', month: 'long', day: 'numeric' });
}

// Helper function for natural sorting of image filenames
function naturalSortImages(a: { image: string }, b: { image: string }): number {
  const ia = a.image;
  const ib = b.image;

  const re = /(\d+)/g; // Regex to find sequences of digits

  const partsA = ia.split(re);
  const partsB = ib.split(re);

  for (let i = 0; i < Math.min(partsA.length, partsB.length); i++) {
    const partA = partsA[i];
    const partB = partsB[i];

    if (i % 2 === 1) { // This part is a number
      const numA = parseInt(partA, 10);
      const numB = parseInt(partB, 10);
      if (numA !== numB) {
        return numA - numB; // Sort numerically
      }
    } else { // This part is a string
      if (partA !== partB) {
        return partA.localeCompare(partB); // Sort alphabetically
      }
    }
  }
  return partsA.length - partsB.length;
}

const sortedImages = gallery.data.images ? gallery.data.images.slice().sort(naturalSortImages) : [];
---
<BaseLayout title={gallery.data.title} description={gallery.data.description || `Fotogalerie: ${gallery.data.title}`}>
  <div class="container">
    <section class="gallery-detail-section">
      <a href="/galerie/" class="back-link">&larr; Zpět na přehled galerií</a>
      <h1 class="gallery-title">{gallery.data.title}</h1>
      {gallery.data.date && (
        <p class="gallery-date">{formatDate(gallery.data.date)}</p>
      )}

      <div class="gallery-description">
        <Content />
      </div>

      <h2 class="photo-grid-heading">Galerie</h2>
      {sortedImages && sortedImages.length > 0 ? (
        <div id="photoGridContainer" class="photo-grid">
          {sortedImages.map(imgEntry => (
            <a href={imgEntry.image} class="glightbox" data-gallery="gallery-main" data-title={imgEntry.alt}>
              <img 
                src={imgEntry.image} 
                alt={imgEntry.alt || gallery.data.title} 
                loading="lazy" 
                data-actual-width=""
                data-actual-height=""
              />
            </a>
          ))}
        </div>
      ) : (
        <p>Tato galerie zatím neobsahuje žádné fotografie.</p>
      )}
    </section>
  </div>
</BaseLayout>

<style>
  .gallery-detail-section {
    padding: 2rem 0 4rem;
  }

  .back-link {
    display: inline-block;
    margin-bottom: 1.5rem;
    color: var(--color-primary);
    text-decoration: none;
    font-weight: 500;
  }
  .back-link:hover {
    text-decoration: underline;
  }

  .gallery-title {
    font-size: var(--h1-font-size, 2.8rem);
    margin-bottom: 0.25rem;
    color: var(--color-headings);
  }

  .gallery-date {
    font-size: 1rem;
    color: var(--color-text-muted);
    margin-bottom: 1.5rem;
  }

  .gallery-description {
    margin-bottom: 2.5rem;
    font-size: 1.1rem;
    line-height: 1.7;
  }
  .gallery-description :global(p) {
    margin-bottom: 1em;
  }
  .gallery-description :global(a) {
    color: var(--color-primary);
  }
   .gallery-description :global(a:hover) {
    text-decoration: underline;
  }


  .photo-grid-heading {
    font-size: var(--h2-font-size, 2rem);
    margin-bottom: 1.5rem;
    color: var(--color-headings);
    text-align: left;
  }

  .photo-grid {
    width: 100%;
    margin-bottom: 2rem;
  }

  .photo-grid img {
    border-radius: 4px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }
</style>

<script type="module">
  // CubeGallery is expected to be loaded globally from BaseLayout.astro
  // GLightbox is also expected to be global from BaseLayout.astro

  function initializeGalleries() {
    // GLightbox
    if (typeof window.GLightbox !== 'undefined') {
      const lightbox = window.GLightbox({
        selector: '.glightbox',
        touchNavigation: true,
        loop: true,
        title: false,
        description: false,
      });
    } else {
      console.warn('GLightbox not available.');
    }

    // Cube Gallery with Polling
    let attempts = 0;
    const maxAttempts = 20; // Try for 2 seconds (20 * 100ms)
    const intervalTime = 100; // 100ms

    function tryInitCubeGallery() {
      // @ts-ignore 
      if (typeof CubeGallery !== 'undefined' || typeof window.CubeGallery !== 'undefined') {
        const GalleryConstructor = CubeGallery || window.CubeGallery;
        const gridContainerElement = document.getElementById('photoGridContainer');
        if (gridContainerElement && gridContainerElement.children.length > 0) {
          try {
            new GalleryConstructor('photoGridContainer', { 
              minHeight: 200, 
              margin: 5
            });
          } catch (e) {
            console.error("Error initializing CubeGallery:", e);
          }
        } else if (gridContainerElement) {
          // console.log("CubeGallery: No images in #photoGridContainer to initialize.");
        } else {
          console.warn('CubeGallery: Container #photoGridContainer not found.');
        }
      } else {
        attempts++;
        if (attempts < maxAttempts) {
          setTimeout(tryInitCubeGallery, intervalTime);
        } else {
          console.warn('CubeGallery library did not become defined after multiple attempts.');
        }
      }
    }
    tryInitCubeGallery(); // Start the first attempt
  }

  document.addEventListener('astro:page-load', initializeGalleries);
  // Attempt an initial call as well, in case astro:page-load fires too late for initial content
  // or for non-transition navigations, but ensure it runs after DOM is available.
  if (document.readyState === 'loading') { 
    document.addEventListener('DOMContentLoaded', initializeGalleries);
  } else { 
    initializeGalleries(); // Or 'interactive' or 'complete'
  }
</script> 