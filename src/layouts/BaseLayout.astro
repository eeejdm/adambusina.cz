---
import { ViewTransitions } from 'astro:transitions';
// import { Image } from 'astro:assets'; // Using standard img tag for CMS-sourced logo for simplicity
import settingsData from '../../src/content/settings/config.json'; // Renamed to avoid conflict

interface NavLink {
  label: string;
  url: string;
}

interface SiteSettings {
  site_title_part1: string;
  site_title_part2: string;
  logo_image?: string;
  header_cta_label?: string;
  header_cta_link?: string;
  footer_intro_text?: string;
  contact_email?: string;
  instagram_username?: string;
  phone_number?: string;
  copyright_text_base?: string;
  header_navigation_links: NavLink[];
  footer_navigation_links: NavLink[];
  seo_description?: string;
  // Homepage specific fields (add all from your JSON if needed here for type safety)
  homepage_hero_heading?: string;
  homepage_hero_subheading?: string;
  homepage_hero_cta_label?: string;
  homepage_hero_cta_link?: string;
  homepage_signature_image?: string;
}

const settings: SiteSettings = settingsData as SiteSettings;

export interface Props {
	title?: string;
  description?: string;
}

const { 
  title: pageTitle,
  description: pageDescription 
} = Astro.props;

const siteTitle = `${settings.site_title_part1} ${settings.site_title_part2}`;
const effectiveTitle = pageTitle ? `${pageTitle} | ${siteTitle}` : siteTitle;
const effectiveDescription = pageDescription || settings.seo_description || 'Adam Busina Photography Portfolio';

const currentYear = new Date().getFullYear();
---

<!doctype html>
<html lang="cs">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={effectiveDescription} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/png" href="/favicons/favicon_white2-07.png" />
    <link rel="apple-touch-icon" href="/favicons/cropped-favicon-06-300x300.png" />
		<meta name="generator" content={Astro.generator} />
		<title>{effectiveTitle}</title>

    {/* Fonts from resources.txt */}
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&family=Space+Grotesk:wght@400;500;700&display=swap" rel="stylesheet">

    {/* GLightbox CSS */}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/glightbox/dist/css/glightbox.min.css" />

    <ViewTransitions />
    <script type="text/javascript" src="https://identity.netlify.com/v1/netlify-identity-widget.js"></script>
	</head>
	<body>
    <header class="site-header">
      <div class="container">
        <a href="/" class="logo-link">
          {settings.logo_image && (
            <img src={settings.logo_image} alt="Logo" class="site-logo" /> /* Alt text simplified */
          )}
          <span class="logo-text">
            {settings.site_title_part1} {settings.site_title_part2} 
          </span>
        </a>
        <div class="header-right-group">
          <nav class="main-nav">
            <ul>
              {settings.header_navigation_links && settings.header_navigation_links.map((link: NavLink) => (
                <li><a href={link.url} class={(Astro.url.pathname === link.url || (link.url !== '/' && Astro.url.pathname.startsWith(link.url + '/'))) ? 'is-active' : ''}>{link.label}</a></li>
              ))}
            </ul>
          </nav>
          {settings.header_cta_label && settings.header_cta_link && (
            <a href={settings.header_cta_link} class="cta-button header-cta">{settings.header_cta_label}</a>
          )}
        </div>
        <button class="hamburger-menu" aria-label="Otevřít menu" aria-expanded="false">
          <span class="hamburger-icon">
            <span></span>
            <span></span>
            <span></span>
          </span>
        </button>
      </div>
    </header>

    <div class="mobile-nav" id="mobileNav" aria-hidden="true">
      <button class="close-mobile-menu" aria-label="Zavřít menu">&times;</button>
      <ul>
        {settings.header_navigation_links && settings.header_navigation_links.map((link: NavLink) => (
          <li><a href={link.url} class={(Astro.url.pathname === link.url || (link.url !== '/' && Astro.url.pathname.startsWith(link.url + '/'))) ? 'is-active' : ''}>{link.label}</a></li>
        ))}
        {settings.header_cta_label && settings.header_cta_link && (
          <li class="mobile-nav-cta"><a href={settings.header_cta_link} class="cta-button">{settings.header_cta_label}</a></li>
        )}
      </ul>
    </div>

		<main>
			<slot />
		</main>

		<footer class="site-footer">
      <div class="container">
        <div class="footer-main-content">
          <div class="footer-column footer-logo-column">
            <img src="/favicons/favicon_white2-07.png" alt="Logo" class="footer-logo" />
          </div>
          <div class="footer-column footer-intro-column">
            <h4>Tady to nemusí končit</h4>
            <p>Děkuji za návštevu mojí stránky. Pokud máte jakýkoliv dotaz, neváhejte a napište mi. Budu se těšit na vzájemnou spolupráci!</p>
          </div>
          <div class="footer-column footer-contact-column">
            <h4>Kontakt</h4>
            {settings.contact_email && <p><a href={`mailto:${settings.contact_email}`}>{settings.contact_email}</a></p>}
            {settings.phone_number && <p><a href={`tel:${settings.phone_number}`}>{settings.phone_number}</a></p>}
            {settings.instagram_username && <p><a href={`https://instagram.com/${settings.instagram_username}`} target="_blank" rel="noopener noreferrer">Instagram (@{settings.instagram_username})</a></p>}
          </div>
          <div class="footer-column footer-links-column">
            <h4>Odkazy</h4>
            <ul>
              {(settings.footer_navigation_links && settings.footer_navigation_links.length > 0 
                ? settings.footer_navigation_links
                : settings.header_navigation_links // Fallback to header links if footer links not defined
              ).map((link: NavLink) => <li><a href={link.url}>{link.label}</a></li>) 
              }
            </ul>
          </div>
        </div>
        <div class="footer-bottom">
          <div class="footer-bottom-left">
             <p>&copy; {currentYear} {settings.copyright_text_base || siteTitle}. Všechna práva vyhrazena.</p>
          </div>
          <div class="footer-bottom-right">
            <p>{settings.site_title_part1} {settings.site_title_part2}</p>
          </div>
        </div>
      </div>
		</footer>

    <script is:inline>
      function setupHamburgerMenu() {
        const hamburgerButton = document.querySelector('.hamburger-menu');
        const mobileNav = document.getElementById('mobileNav');

        if (hamburgerButton && mobileNav) {
          // Remove existing listener to prevent duplicates if this function is called multiple times
          // A more robust way might involve a flag or checking if listener already exists by other means
          // For now, let's assume direct re-assignment or a simple check suffices.
          // Cloning and replacing the button is a robust way to clear all listeners:
          const newButton = hamburgerButton.cloneNode(true);
          hamburgerButton.parentNode.replaceChild(newButton, hamburgerButton);

          const closeButton = mobileNav.querySelector('.close-mobile-menu');

          function openMenu() {
            newButton.setAttribute('aria-expanded', 'true');
            newButton.classList.add('is-active');
            mobileNav.classList.add('is-open');
            mobileNav.setAttribute('aria-hidden', 'false');
            document.body.classList.add('no-scroll');
            // Add listener for click outside when menu is open
            document.addEventListener('click', handleClickOutside, true);
          }

          function closeMenu() {
            newButton.setAttribute('aria-expanded', 'false');
            newButton.classList.remove('is-active');
            mobileNav.classList.remove('is-open');
            mobileNav.setAttribute('aria-hidden', 'true');
            document.body.classList.remove('no-scroll');
            // Remove listener for click outside when menu is closed
            document.removeEventListener('click', handleClickOutside, true);
          }

          newButton.addEventListener('click', (event) => {
            event.stopPropagation(); // Prevent click from bubbling to document
            const isOpened = newButton.getAttribute('aria-expanded') === 'true';
            if (isOpened) {
              closeMenu();
            } else {
              openMenu();
            }
          });

          if (closeButton) {
            closeButton.addEventListener('click', (event) => {
              event.stopPropagation(); 
              closeMenu();
            });
          }

          function handleClickOutside(event) {
            // If click is on the hamburger button or its children, do nothing
            if (newButton.contains(event.target)) {
              return;
            }
            // If click is inside mobileNav but not on the close button, do nothing
            if (mobileNav.contains(event.target) && (!closeButton || !closeButton.contains(event.target))) {
                // Exception: if a nav link is clicked, we DO want to close the menu
                if (event.target.tagName === 'A' && mobileNav.contains(event.target)) {
                    closeMenu();
                    return;
                }
                // Otherwise, if it's just a click inside the menu body, don't close
                return; 
            }
            // If menu is open and click is outside, close it
            if (mobileNav.classList.contains('is-open')) {
              closeMenu();
            }
          }

          // Initial state check
          if (!mobileNav.classList.contains('is-open')) {
            newButton.setAttribute('aria-expanded', 'false');
            mobileNav.setAttribute('aria-hidden', 'true');
            newButton.classList.remove('is-active');
            document.body.classList.remove('no-scroll');
          } else {
            newButton.setAttribute('aria-expanded', 'true');
            mobileNav.setAttribute('aria-hidden', 'false');
            newButton.classList.add('is-active');
            document.body.classList.add('no-scroll');
          }
        }
      }

      // Run on initial page load
      setupHamburgerMenu();

      // Run after Astro View Transitions page swap
      document.addEventListener('astro:page-load', setupHamburgerMenu);
    </script>

    {/* GLightbox JS (place before closing </body>) */}
    <script src="https://cdn.jsdelivr.net/npm/glightbox/dist/js/glightbox.min.js"></script>

    {/* Cube Gallery JS (for justified layout) - Now local */}
    <script is:inline src="/js/cube-gallery.min.js"></script>
	</body>
</html>

<style is:global>
  /* CSS Variables from resources.txt */
  :root {
    --color-white: #ffffff;
    --color-dark: #1e2022; /* (dark, black, text, footer background) */
    --color-primary-gray: #55616a; /* (primary, buttons:hover, some sections background) */
    --color-secondary-gray: #cbd6de; /* (secondary, buttons primary) */
    --color-accent-blue: #4b9dc0; /* (accent, nav links:active, text highlighting) */

    --font-headings: 'Poppins', sans-serif;
    --font-text: 'Space Grotesk', sans-serif;

    /* Additional vars for layout */
    --container-max-width: 1240px;
    --container-padding: 1.5rem;
  }

  /* Basic Reset & Global Styles */
  *, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  html {
    font-family: var(--font-text);
    font-size: 16px;
    line-height: 1.6;
    background-color: var(--color-white);
    color: var(--color-dark);
    scroll-behavior: smooth;
    overflow-y: scroll; /* Prevent layout shift from scrollbar appearing/disappearing */
  }

  body {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  body.no-scroll {
    overflow: hidden;
  }

  main {
    flex-grow: 1;
  }

  .container {
    width: 100%;
    max-width: var(--container-max-width);
    margin-left: auto;
    margin-right: auto;
    padding-left: var(--container-padding);
    padding-right: var(--container-padding);
  }

  h1, h2, h3, h4, h5, h6 {
    font-family: var(--font-headings);
    font-weight: 700;
    line-height: 1.2;
    margin-bottom: 1rem;
    color: var(--color-dark);
  }

  h1 { font-size: 2.5rem; }
  h2 { font-size: 2rem; }
  h3 { font-size: 1.75rem; }
  h4 { font-size: 1.25rem; }

  p {
    margin-bottom: 1rem;
  }

  a {
    color: var(--color-accent-blue);
    text-decoration: none;
    transition: color 0.2s ease-in-out;
  }

  a:hover, a:focus {
    color: var(--color-primary-gray);
    text-decoration: underline;
  }

  img, svg {
    max-width: 100%;
    height: auto;
    display: block; /* Removes bottom space under images */
  }

  ul {
    list-style: none; /* Removing default list style, will apply custom if needed */
    padding: 0;
    margin-bottom: 1rem;
  }

  ol {
    list-style-position: inside;
    padding-left: 1.5em; 
    margin-bottom: 1rem;
  }

  .cta-button {
    display: inline-block;
    padding: 0.75em 1.5em;
    background-color: var(--color-secondary-gray);
    color: var(--color-dark);
    font-family: var(--font-headings);
    font-weight: 600;
    text-decoration: none;
    border-radius: 4px;
    transition: background-color 0.2s ease, color 0.2s ease;
    border: 1px solid var(--color-primary-gray);
  }

  .cta-button:hover, .cta-button:focus {
    background-color: var(--color-primary-gray);
    color: var(--color-white);
    text-decoration: none;
    border-color: var(--color-primary-gray);
  }
  .cta-button.header-cta {
     background-color: var(--color-secondary-gray);
     color: var(--color-dark);
     border: 1px solid var(--color-secondary-gray);
     border-radius: 18px;
     font-weight: 600;
     font-size: 0.875rem;
     padding: 0.6em 1.2em;
     text-decoration: none;
     line-height: normal;
  }
  .cta-button.header-cta:hover, .cta-button.header-cta:focus {
      background-color: var(--color-primary-gray);
      color: var(--color-white);
      border-color: var(--color-primary-gray);
      text-decoration: none;
  }


  /* Header Styles */
  .site-header {
    background-color: var(--color-white);
    padding: 0.75rem 0;
    border-bottom: 1px solid #eee;
    box-shadow: 0 1px 3px rgba(0,0,0,0.04);
    position: sticky;
    top: 0;
    z-index: 1000;
  }
  .site-header .container {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  .logo-link {
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
  }
  .logo-link:hover,
  .logo-link:focus {
    text-decoration: none; /* Remove underline for logo link specifically */
  }
  .site-logo {
    max-height: 50px;
    width: auto;
    display: block;
  }
  .logo-text {
    font-family: var(--font-headings);
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--color-dark);
    line-height: 1;
    text-decoration: none;
  }
  .logo-text strong.logo-text-separator, 
  .logo-text strong.logo-text-description {
    font-weight: 600;
  }

  .header-right-group {
    display: flex;
    align-items: center;
    gap: 1.5rem;
  }
  .main-nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 1.5rem;
  }
  .main-nav a {
    font-family: var(--font-headings);
    color: var(--color-dark);
    text-decoration: none;
    font-weight: 600;
    font-size: 0.875rem;
    padding: 0.5em 0;
    position: relative;
  }
  .main-nav a:hover,
  .main-nav a:focus {
    color: var(--color-primary-gray);
    text-decoration: none;
  }
  .main-nav a.is-active {
    color: var(--color-accent-blue);
  }
  .main-nav a.is-active::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 100%;
    height: 2px;
    background-color: var(--color-accent-blue);
  }

  .hamburger-menu {
    display: none;
    background: transparent;
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    z-index: 1010;
  }
  .hamburger-icon {
    display: block;
    width: 24px;
    height: 18px;
    position: relative;
  }
  .hamburger-icon span {
    display: block;
    position: absolute;
    height: 2px;
    width: 100%;
    background: var(--color-dark);
    border-radius: 2px;
    left: 0;
    transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
  }
  .hamburger-icon span:nth-child(1) {
    top: 0px;
  }
  .hamburger-icon span:nth-child(2) {
    top: 8px;
  }
  .hamburger-icon span:nth-child(3) {
    top: 16px;
  }

  /* Responsive Styles for Header */
  @media (max-width: 768px) {
    .header-right-group {
      display: none;
    }
    .hamburger-menu {
      display: block;
    }
    .site-logo {
      max-height: 40px;
    }
    .logo-text {
       display: none;
    }
  }

  @media (max-width: 480px) {
    .site-logo {
      max-height: 30px;
    }
    .logo-text {
      display: none;
    }
  }

  /* Hamburger Icon Animation */
  .hamburger-menu.is-active .hamburger-icon span:nth-child(1) {
    transform: translateY(8px) rotate(45deg);
  }
  .hamburger-menu.is-active .hamburger-icon span:nth-child(2) {
    opacity: 0;
  }
  .hamburger-menu.is-active .hamburger-icon span:nth-child(3) {
    transform: translateY(-8px) rotate(-45deg);
  }

  /* Mobile Navigation Menu */
  .mobile-nav {
    display: none; /* Hidden by default */
    position: fixed;
    top: 0; /* Will be adjusted dynamically if header is not transparent, or set to header height */
    left: 0;
    width: 100%;
    background-color: var(--color-white); /* Light background */
    z-index: 999; /* Below sticky header (1000), but above other content */
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    max-height: calc(100vh - 60px); /* Example: 100vh minus approx header height */
    overflow-y: auto;
    padding-top: 60px; /* Adjust this to match your actual header height */
  }

  .mobile-nav.is-open {
    display: block; 
  }
  
  .close-mobile-menu {
    position: absolute;
    top: 10px; /* Adjust for padding */
    right: var(--container-padding, 1.5rem); /* Align with container padding */
    background: transparent;
    border: none;
    font-size: 2rem; /* Make X larger */
    color: var(--color-dark);
    cursor: pointer;
    padding: 0.5rem;
    line-height: 1;
    z-index: 1001; /* Above mobile-nav content */
  }

  .mobile-nav ul {
    list-style: none;
    padding: 0 var(--container-padding, 1.5rem); /* Add horizontal padding */
    margin: 0;
  }
  .mobile-nav ul li {
    margin-bottom: 0; /* Remove bottom margin for tighter list */
  }
  .mobile-nav ul li a {
    font-family: var(--font-headings);
    color: var(--color-dark); /* Dark text on light background */
    text-decoration: none;
    font-size: 1rem;
    font-weight: 500;
    display: block;
    padding: 0.75rem 0; /* Vertical padding, no horizontal padding needed if text-align left */
    border-bottom: 1px solid #f0f0f0; /* Separator for links */
  }
  .mobile-nav ul li:last-child a {
    border-bottom: none; /* No border for the last item */
  }
  .mobile-nav ul li a:hover,
  .mobile-nav ul li a:focus {
    color: var(--color-accent-blue);
    background-color: #f0f0f0; /* Lighter hover for light background */
  }
  .mobile-nav .mobile-nav-cta {
    margin-top: 1rem;
    padding: 0.5rem var(--container-padding) 1rem; /* Add horizontal padding */
  }
  .mobile-nav .mobile-nav-cta a.cta-button {
    background-color: var(--color-secondary-gray);
    color: var(--color-dark);
    border-color: var(--color-secondary-gray);
    padding: 0.8em 1.5em;
    font-size: 1rem; /* Adjusted size */
    display: block; /* Make it full width */
    text-align: center;
  }
  .mobile-nav .mobile-nav-cta a.cta-button:hover,
  .mobile-nav .mobile-nav-cta a.cta-button:focus {
    background-color: var(--color-primary-gray);
    color: var(--color-white);
    border-color: var(--color-primary-gray);
  }

  /* Footer Styles */
  .site-footer {
    background-color: var(--color-dark);
    color: var(--color-primary-gray); /* Default text color for footer */
    padding: 3rem 0 1.5rem;
    margin-top: 3rem;
  }
  .site-footer a {
    color: var(--color-secondary-gray);
  }
  .site-footer a:hover, .site-footer a:focus {
    color: var(--color-white);
    text-decoration: underline;
  }

  .footer-main-content {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem; /* Gap between columns */
    margin-bottom: 2rem;
  }

  .footer-column {
    flex: 1 1 100%; /* Default to full width for smallest screens */
    min-width: 200px; /* Minimum width before wrapping */
  }

  .footer-logo-column {
    display: flex;
    align-items: flex-start; /* Align logo to the top */
  }
  .footer-logo {
    max-height: 70px; /* Adjust as needed */
    width: auto;
  }
  
  .footer-intro-column .footer-intro {
    max-width: none; /* Override previous max-width if any */
  }
  .footer-intro p:last-child {
    margin-bottom: 0;
  }

  .footer-column h4 {
    font-family: var(--font-headings);
    color: var(--color-white);
    margin-bottom: 1rem;
    font-weight: 600;
    font-size: 1.1rem; /* Slightly smaller than body h4 for hierarchy */
  }

  .footer-column ul {
    list-style: none;
    padding: 0;
    margin:0;
  }
  .footer-column ul li {
    margin-bottom: 0.5rem;
  }
  .footer-column p {
    margin-bottom: 0.5rem; /* Tighter spacing for contact details */
    font-size: 0.95em;
    color: var(--color-secondary-gray); /* Changed text color to secondary gray */
  }
  .footer-column p:last-child {
    margin-bottom: 0;
  }


  .footer-bottom {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
    padding-top: 1.5rem;
    border-top: 1px solid var(--color-primary-gray);
    font-size: 0.9em;
    color: var(--color-secondary-gray); /* Copyright and site title color */
  }
  .footer-bottom-left,
  .footer-bottom-right {
    text-align: left;
    flex-basis: 50%; /* Give some basis to allow wrapping */
  }
  .footer-bottom-left {
    text-align: left;
    flex-basis: 50%; /* Give some basis to allow wrapping */
  }
  .footer-bottom-right {
    text-align: right;
    flex-basis: 50%;
  }

  /* Responsive column layout for footer */
  /* Small screens (1 column) - already default by flex: 1 1 100% */

  /* Medium screens (2 columns) */
  @media (min-width: 576px) { /* Adjust breakpoint as needed */
    .footer-column {
      flex: 1 1 calc(50% - 1rem); /* 2 columns, accounting for gap */
    }
    .footer-logo-column, .footer-intro-column {
       flex-basis: calc(50% - 1rem);
    }
     .footer-contact-column, .footer-links-column {
       flex-basis: calc(50% - 1rem);
    }
  }

  /* Large screens (4 columns as per initial flex settings for wider items) */
  /* Re-ordering columns visually from right: logo, intro, contact, links */
  @media (min-width: 992px) { /* Adjust breakpoint as needed for 4 columns */
    .footer-column {
      flex: 1 1 calc(25% - 1.5rem); /* 4 columns, accounting for gap */
    }
    .footer-logo-column { order: 1; }       /* Farthest left */
    .footer-intro-column { order: 2; }      /* Second from left */
    .footer-contact-column { order: 3; }    /* Third from left */
    .footer-links-column { order: 4; }      /* Farthest right */

    /* Specific flex basis if needed for uneven columns */
    /* Example: .footer-logo-column { flex-basis: 15%; } */
    /*          .footer-intro-column { flex-basis: 35%; } */
    /*          .footer-contact-column { flex-basis: 25%; } */
    /*          .footer-links-column { flex-basis: 25%; } */
  }
  
  @media (max-width: 575.98px) { /* Ensure bottom elements stack on smallest screens */
    .footer-bottom {
      flex-direction: column;
      gap: 0.5rem; /* Add a small gap when stacked */
    }
    .footer-bottom-left,
    .footer-bottom-right {
      text-align: center; /* Center text when stacked */
      flex-basis: 100%;
    }
    .footer-column {
      text-align: center;
    }
    .footer-logo-column {
      justify-content: center; /* Center the logo image within its flex container */
    }
  }


  .copyright { /* This class is no longer used directly as a wrapper for the whole line, but kept for now */
    text-align: center;
    font-size: 0.9em;
    opacity: 0.8;
    padding-top: 1.5rem;
    border-top: 1px solid var(--color-primary-gray);
  }

  /* Utility classes */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  /* GLightbox Customizations */
  .gslide-description,
  .glightbox-description,
  .gdesc-inner, /* This is a common one, often wrapping title and desc */
  .gslide-title, /* Specifically hide title element */
  .gslide-desc /* Specifically hide description element */ {
    display: none !important; /* Use !important to ensure override */
    visibility: hidden !important;
  }

  /* If there's still a container for the description taking up space, try hiding it too */
  .gslide-description-container {
    display: none !important;
    visibility: hidden !important;
  }

  /* GLightbox: Attempt to constrain overall size and center */
  .gcontainer, .ginlined-content {
    /* .gcontainer is the main box, .ginlined-content for inline content */
    padding: 20px; /* Add some breathing room around the content box */
    box-sizing: border-box;
  }

  .gslide-inner-content { /* This is often the element that has the actual width/height from JS */
    max-width: 90vw !important;  /* Max 90% of viewport width */
    max-height: 85vh !important; /* Max 85% of viewport height */
    width: auto !important; 
    height: auto !important;
    display: flex; /* Use flex to center the media element if it's smaller */
    flex-direction: column;
    justify-content: center;
    align-items: center;
    margin: auto; /* Centering the slide content box itself */
  }

  .gslide-media {
    /* Resetting any direct width/height that might be set by JS if gslide-inner-content controls size */
    width: auto !important; 
    height: auto !important;
    max-width: 100%; /* Media should not exceed its flex parent (gslide-inner-content) */
    max-height: 100%;
  }

  .gslide-media img, .gslide-media video {
    max-width: 100%;
    max-height: 100%;
    width: auto;
    height: auto;
    object-fit: contain;
    display: block;
    margin: 0 auto; /* Centering image within gslide-media if it doesn't fill */
  }
</style> 